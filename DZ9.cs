//==========================================================================================================================================
// Задайте значение N. Напишите программу, которая выведет все натуральные числа в промежутке от N до 1. Выполнить с помощью рекурсии.
//==========================================================================================================================================
/*

Console.WriteLine("Введите число: ");
int N = int.Parse(Console.ReadLine()!);

Console.WriteLine(PrintNumbers(N,1));

string PrintNumbers (int end, int start)
{
    if(start == end) return end.ToString();
    return (end + " "+ PrintNumbers(end - 1, start));
}

*/
//==========================================================================================================================================
// Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
//==========================================================================================================================================
/*

Console.WriteLine("Введите число M: ");
int m = int.Parse(Console.ReadLine()!);

Console.WriteLine("Введите число N: ");
int n = int.Parse(Console.ReadLine()!);

Console.WriteLine(PrintNumbers(m,n));

int PrintNumbers(int start, int end)
{
    if (start == end) return start;
    return start + PrintNumbers(start+1,end);
}

*/

//==========================================================================================================================================
// Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
//==========================================================================================================================================
/*

Console.WriteLine("Введите число M: ");
int m = int.Parse(Console.ReadLine()!);

Console.WriteLine("Введите число N: ");
int n = int.Parse(Console.ReadLine()!);

Console.WriteLine(A(m,n));

int A (int m, int n)
{
    if (m==0)
        return n+1;
    else
        if ((m!= 0) && (n == 0))
            return A(m-1, 1);
        else
            return A(m-1, A(m, n-1));
}

*/

